class Solution:
    def partition(self, s: str) -> List[List[str]]:
        if s == None or len(s) == 0:
            return []
        
        self.result = []
        self.recurse(s, 0, [])
        return self.result
    
    def recurse(self, s: str, pivot: int, path: List[str]) -> None:
        #base
        if pivot == len(s):
            self.result.append([num for num in path])
            return

        #logic
        for i in range(pivot, len(s)):
            sub = s[pivot : i + 1]
            if self.isPalindrome(sub):
                #action
                path.append(sub)
                #recurse
                self.recurse(s, i + 1, path)
                #backtrack
                path.pop()


    def isPalindrome(self, s:str) -> bool:
        l = 0 
        r = len(s) - 1
        while l <= r:
            if s[l] != s[r]:
                return False
            l += 1
            r -= 1
        return True